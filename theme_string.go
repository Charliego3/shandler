// Code generated by "enumer -type ThemeSchema -output theme_string.go"; DO NOT EDIT.

package shandler

import (
	"fmt"
	"strings"
)

const _ThemeSchemaName = "ThemeTimeThemeDebugThemeInfoThemeWarnThemeErrorThemePrefixThemeCallerThemeKeyThemeBracket"

var _ThemeSchemaIndex = [...]uint8{0, 9, 19, 28, 37, 47, 58, 69, 77, 89}

const _ThemeSchemaLowerName = "themetimethemedebugthemeinfothemewarnthemeerrorthemeprefixthemecallerthemekeythemebracket"

func (i ThemeSchema) String() string {
	i -= 1
	if i >= ThemeSchema(len(_ThemeSchemaIndex)-1) {
		return fmt.Sprintf("ThemeSchema(%d)", i+1)
	}
	return _ThemeSchemaName[_ThemeSchemaIndex[i]:_ThemeSchemaIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ThemeSchemaNoOp() {
	var x [1]struct{}
	_ = x[ThemeTime-(1)]
	_ = x[ThemeDebug-(2)]
	_ = x[ThemeInfo-(3)]
	_ = x[ThemeWarn-(4)]
	_ = x[ThemeError-(5)]
	_ = x[ThemePrefix-(6)]
	_ = x[ThemeCaller-(7)]
	_ = x[ThemeKey-(8)]
	_ = x[ThemeBracket-(9)]
}

var _ThemeSchemaValues = []ThemeSchema{ThemeTime, ThemeDebug, ThemeInfo, ThemeWarn, ThemeError, ThemePrefix, ThemeCaller, ThemeKey, ThemeBracket}

var _ThemeSchemaNameToValueMap = map[string]ThemeSchema{
	_ThemeSchemaName[0:9]:        ThemeTime,
	_ThemeSchemaLowerName[0:9]:   ThemeTime,
	_ThemeSchemaName[9:19]:       ThemeDebug,
	_ThemeSchemaLowerName[9:19]:  ThemeDebug,
	_ThemeSchemaName[19:28]:      ThemeInfo,
	_ThemeSchemaLowerName[19:28]: ThemeInfo,
	_ThemeSchemaName[28:37]:      ThemeWarn,
	_ThemeSchemaLowerName[28:37]: ThemeWarn,
	_ThemeSchemaName[37:47]:      ThemeError,
	_ThemeSchemaLowerName[37:47]: ThemeError,
	_ThemeSchemaName[47:58]:      ThemePrefix,
	_ThemeSchemaLowerName[47:58]: ThemePrefix,
	_ThemeSchemaName[58:69]:      ThemeCaller,
	_ThemeSchemaLowerName[58:69]: ThemeCaller,
	_ThemeSchemaName[69:77]:      ThemeKey,
	_ThemeSchemaLowerName[69:77]: ThemeKey,
	_ThemeSchemaName[77:89]:      ThemeBracket,
	_ThemeSchemaLowerName[77:89]: ThemeBracket,
}

var _ThemeSchemaNames = []string{
	_ThemeSchemaName[0:9],
	_ThemeSchemaName[9:19],
	_ThemeSchemaName[19:28],
	_ThemeSchemaName[28:37],
	_ThemeSchemaName[37:47],
	_ThemeSchemaName[47:58],
	_ThemeSchemaName[58:69],
	_ThemeSchemaName[69:77],
	_ThemeSchemaName[77:89],
}

// ThemeSchemaString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ThemeSchemaString(s string) (ThemeSchema, error) {
	if val, ok := _ThemeSchemaNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ThemeSchemaNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ThemeSchema values", s)
}

// ThemeSchemaValues returns all values of the enum
func ThemeSchemaValues() []ThemeSchema {
	return _ThemeSchemaValues
}

// ThemeSchemaStrings returns a slice of all String values of the enum
func ThemeSchemaStrings() []string {
	strs := make([]string, len(_ThemeSchemaNames))
	copy(strs, _ThemeSchemaNames)
	return strs
}

// IsAThemeSchema returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ThemeSchema) IsAThemeSchema() bool {
	for _, v := range _ThemeSchemaValues {
		if i == v {
			return true
		}
	}
	return false
}
