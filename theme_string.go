// Code generated by "enumer -type ThemeSection -output theme_string.go"; DO NOT EDIT.

package shandler

import (
	"fmt"
	"strings"
)

const _ThemeSectionName = "ThemeTimeThemeDebugThemeInfoThemeWarnThemeErrorThemePrefixThemeCallerThemeKeyThemeBracket"

var _ThemeSectionIndex = [...]uint8{0, 9, 19, 28, 37, 47, 58, 69, 77, 89}

const _ThemeSectionLowerName = "themetimethemedebugthemeinfothemewarnthemeerrorthemeprefixthemecallerthemekeythemebracket"

func (i ThemeSection) String() string {
	i -= 1
	if i >= ThemeSection(len(_ThemeSectionIndex)-1) {
		return fmt.Sprintf("ThemeSection(%d)", i+1)
	}
	return _ThemeSectionName[_ThemeSectionIndex[i]:_ThemeSectionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ThemeSectionNoOp() {
	var x [1]struct{}
	_ = x[ThemeTime-(1)]
	_ = x[ThemeDebug-(2)]
	_ = x[ThemeInfo-(3)]
	_ = x[ThemeWarn-(4)]
	_ = x[ThemeError-(5)]
	_ = x[ThemePrefix-(6)]
	_ = x[ThemeCaller-(7)]
	_ = x[ThemeKey-(8)]
	_ = x[ThemeBracket-(9)]
}

var _ThemeSectionValues = []ThemeSection{ThemeTime, ThemeDebug, ThemeInfo, ThemeWarn, ThemeError, ThemePrefix, ThemeCaller, ThemeKey, ThemeBracket}

var _ThemeSectionNameToValueMap = map[string]ThemeSection{
	_ThemeSectionName[0:9]:        ThemeTime,
	_ThemeSectionLowerName[0:9]:   ThemeTime,
	_ThemeSectionName[9:19]:       ThemeDebug,
	_ThemeSectionLowerName[9:19]:  ThemeDebug,
	_ThemeSectionName[19:28]:      ThemeInfo,
	_ThemeSectionLowerName[19:28]: ThemeInfo,
	_ThemeSectionName[28:37]:      ThemeWarn,
	_ThemeSectionLowerName[28:37]: ThemeWarn,
	_ThemeSectionName[37:47]:      ThemeError,
	_ThemeSectionLowerName[37:47]: ThemeError,
	_ThemeSectionName[47:58]:      ThemePrefix,
	_ThemeSectionLowerName[47:58]: ThemePrefix,
	_ThemeSectionName[58:69]:      ThemeCaller,
	_ThemeSectionLowerName[58:69]: ThemeCaller,
	_ThemeSectionName[69:77]:      ThemeKey,
	_ThemeSectionLowerName[69:77]: ThemeKey,
	_ThemeSectionName[77:89]:      ThemeBracket,
	_ThemeSectionLowerName[77:89]: ThemeBracket,
}

var _ThemeSectionNames = []string{
	_ThemeSectionName[0:9],
	_ThemeSectionName[9:19],
	_ThemeSectionName[19:28],
	_ThemeSectionName[28:37],
	_ThemeSectionName[37:47],
	_ThemeSectionName[47:58],
	_ThemeSectionName[58:69],
	_ThemeSectionName[69:77],
	_ThemeSectionName[77:89],
}

// ThemeSectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ThemeSectionString(s string) (ThemeSection, error) {
	if val, ok := _ThemeSectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ThemeSectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ThemeSection values", s)
}

// ThemeSectionValues returns all values of the enum
func ThemeSectionValues() []ThemeSection {
	return _ThemeSectionValues
}

// ThemeSectionStrings returns a slice of all String values of the enum
func ThemeSectionStrings() []string {
	strs := make([]string, len(_ThemeSectionNames))
	copy(strs, _ThemeSectionNames)
	return strs
}

// IsAThemeSection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ThemeSection) IsAThemeSection() bool {
	for _, v := range _ThemeSectionValues {
		if i == v {
			return true
		}
	}
	return false
}
